import os
import re
import datetime
import sys
import csv


def clear_screen():
    os.system("cls" if os.name == 'nt' else 'clear')


def menu():
while True:
    print("WORK LOG")
    print("What would you like to do?")
    print('''
          a) Add new entry
          b) Search in existing entries
          c) Quit program
''')

    choice = (input("> ")).lower()
    if choice == 'a'.lower():
        choice_a()
    elif choice == 'b'.lower():
        choice_b()
    elif choice == 'c'.lower():
        sys.exit()


def results_display(row):
    '''Prints entry in uniform format'''
    print("\nDate: " + row['Date'])
    print("Title: " + row['Title'])
    print("Time Spent: " + row['Time Spent'])
    print("Notes: " + row['Notes'])


def choice_a():
    clear_screen()

    print("Date of task")

    while True:
        entry_date = input("Please use DD/MM/YYYY:\n")
        try:
            entry_date = datetime.datetime.strptime(entry_date, "%d/%m/%Y").strftime("%d/%m/%Y")
            break
        except ValueError:
            print("Error, invalid entry. Date must be format dd/mm/yyyy ")

    clear_screen()

    task_title = input("Title of the task:\n")

    clear_screen()

    while True:
        try:
            time_spent = abs(int(input("Time spent (Rounded minutes):\n")))
        except ValueError:
            print("Error, invalid entry. Please try again!")
        else:
            break

    clear_screen()

    optional_notes = input("Notes (Optional):\n")

    clear_screen()

    input("The entry has been added. Press ENTER to return to the main menu\n")

    clear_screen()

    with open('task_writer.csv', 'w') as csv_file:
        fieldnames = ['Date', 'Title', 'Time Spent', 'Notes']
        entry_writer = csv.DictWriter(csv_file, fieldnames=fieldnames)

        entry_writer.writeheader()
        entry_writer.writerow({'Date:' + entry_date,
                               'Title:' + task_title,
                               'Time Spent:' + time_spent,
                               'Notes:' + optional_notes})


def choice_b():
    clear_screen()
    print('''Do you want to search by:
          a) Exact Date
          b) Range of dates
          c) Exact Search
          d) Regex Pattern
          e) Time Spent
          f) Return to menu
''')
    choice_b = (input("> ")).lower()
    if choice_b == 'a'.lower():
        exact_date()
    elif choice_b == 'b'.lower():
        date_range()
    elif choice_b == 'c'.lower():
        keyword_search()
    elif choice_b == 'd'.lower():
        time_search()
    elif choice_b == 'e'.lower():
        regex_patter()
    elif choice_b == 'f'.lower():
        menu()
    else:
        "Error, invalid entry. Please try again"


def exact_date():
    '''Search by exact date entry'''
    entry_found = []
    clear_screen()
    print("Enter the date")
    while True:
        date_choice = input("Please use DD/MM/YYYY:\n")
        try:
            date_choice = datetime.datetime.strptime(date_choice, "%d/%m/%Y")
        except ValueError:
            print("Error, invalid entry. Not a valid date.")
        else:
            break
    clear_screen()
    with open('task_writer.csv', 'r') as csvfile:
        names = ['Date', 'Title', 'Time Spent', 'Notes']
        entry_reader = csv.DictReader(csvfile, fieldnames=names, delimiter=',')

        for row in entry_reader:
            if date_choice == row['Date']:
                entry_found.append(row['Date'])
                results_display(row)
        if len(entry_found) < 1:
            print("\nSorry, entry for requested date not found.")
            choice_b()


def date_range():
    '''Search based on a range of dates'''
    entry_found = []
    clear_screen()
    print("Enter the dates range")
    date_input1 = input("Please input start date in format DD\MM\YYYY:\n")
    date_input1 = datetime.datetime.strptime(date_input1)
    date_input2 = input("Please input end date in format DD\MM\YYYY:\n")
    date_input2 = datetime.datetime.strptime(date_input2)

    with open('task_writer.csv', 'r') as csvfile:
        names = ['Date', 'Title', 'Time Spent', 'Notes']
        entry_reader = csv.DictReader(csvfile, fieldnames=names, delimiter=',')
        for row in entry_reader:
            if date_input1 < row['Date'] < date_input2:
                entry_found.append(row['Date'])
                results_display(row)
        if len(entry_found) < 1:
            print("\nSorry, entry for requested date range not found.")
            choice_b()


def keyword_search():
    '''Search based on exact keyword'''
    entry_found = []
    clear_screen()
    exact_search = input("Please enter search keyword:\n")
    clear_screen()
    with open('task_writer.csv', 'r') as csvfile:
        names = ['Date', 'Title', 'Time Spent', 'Notes']
        entry_reader = csv.DictReader(csvfile, fieldnames=names, delimiter=',')
        for row in entry_reader:
            if exact_search.lower() == row['Title'].lower() or row['Notes'].lower():
                entry_found.append(row['Title'])
                results_display(row)
        if len(entry_found) < 1:
            print("\nSorry, keyword not found.")
            choice_b()


def time_search():
    '''Search based on task time'''
    entry_found = []
    clear_screen()
    time_search = input("Please enter search time:\n")
    clear_screen()
    with open('task_writer.csv', 'r') as csvfile:
        names = ['Date', 'Title', 'Time Spent', 'Notes']
        entry_reader = csv.DictReader(csvfile, fieldnames=names, delimiter=',')
        for row in entry_reader:
            if time_search == row['Time Spent']:
                entry_found.append(row['Time Spent'])
                results_display(row)
        if len(entry_found) < 1:
            print("\nSorry, entry for requested time not found.")
            choice_b()


def regex_pattern():
    '''Search based on Regex pattern'''
    entry_found = []
    clear_screen()
    regex_search = input("Please enter Regex search pattern:\n")
    while True:
        try:
            regex_search = re.compile(r'{}'.format(regex_search), re.X | re.M)
        except re.error:
            print("Error, not a valid expression.")
        else:
            break
    clear_screen()
    with open('task_writer.csv', 'r') as csvfile:
        names = ['Date', 'Title', 'Time Spent', 'Notes']
        entry_reader = csv.DictReader(csvfile, fieldnames=names, delimiter=',')
        for row in entry_reader:
            if regex_search == re.findall(regex_search, entry_reader):
                entry_found.append(row['Title'])
                results_display(row)
        if len(entry_found) < 1:
            print("\nSorry, entry for requested time not found.")
            choice_b()

if __name__ == '__main__':
        menu()
